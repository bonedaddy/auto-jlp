//! Autogenerated CPI client for the Orca Whirlpools program.
//!
//! CPI helpers for the [Orca Whirlpools](https://github.com/orca-so/whirlpools)
//! program.
//!
//! This crate was automatically generated by
//! [anchor-gen](https://github.com/saber-hq/anchor-gen), a crate for generating
//! Anchor CPI helpers from JSON IDLs.

anchor_gen::generate_cpi_interface!(
    idl_path = "idl.json"
);


declare_id!("PERPHjGBqRHArX4DySjwM6UJHiR3sWAatqfdBS2qQJu");

impl Perpetuals {
    /*
    pub permissions: Permissions,
    pub pools: Vec<Pubkey, Global>,
    pub admin: Pubkey,
    pub transfer_authority_bump: u8,
    pub perpetuals_bump: u8,
    pub inception_time: i64,
     */
    pub fn log(&self) -> String {
        let msg_str = "Perpetuals {\n";
        let msg_str = format!("{}\tpools {:?}\n", msg_str, self.pools);
        let msg_str = format!("{}\tadmin {}\n", msg_str, self.admin);
        let msg_str = format!("{}}}", msg_str);
        msg_str
    }
}

impl Limit {
    pub fn to_string(&self) -> String {
        format!("Limit {{\n\t\tmax_aum_usd {}\n\t\tmax_individual_lp_token {}\n\t\tmax_position_usd {}\n\t}}", self.max_aum_usd, self.max_individual_lp_token, self.max_position_usd)
    }
}

impl Pool {
    /*
    pub struct Pool {
    pub name: String,
    pub custodies: Vec<Pubkey, Global>,
    pub aum_usd: u128,
    pub limit: Limit,
    pub fees: Fees,
    pub pool_apr: PoolApr,
    pub max_request_execution_sec: i64,
    pub bump: u8,
    pub lp_token_bump: u8,
    pub inception_time: i64,
} 
     */

    pub fn log(&self) -> String {
        let msg_str = "Pool {\n";
        let msg_str = format!("{}\tname {}\n", msg_str, self.name);
        let msg_str = format!("{}\tcustodies {:?}\n", msg_str, self.name);
        let msg_str = format!("{}\taum_usd {}\n", msg_str, self.aum_usd);
        let msg_str = format!("{}\tlimit {}\n", msg_str, self.limit.to_string());
        let msg_str = format!("{}\tfees TODO\n", msg_str);
        let msg_str = format!("{}\tpool_apr TODO\n", msg_str);
        msg_str
    }
}